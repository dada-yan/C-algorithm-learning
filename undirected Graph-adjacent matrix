#include<stdio.h>
#include<stdbool.h>
#include"Graph.h"
#include<assert.h>

typedef struct GraphRep{
 int **edges;
int nV;
int nE;
}GraphRep;

Graph newgraph(int n){
assert(n>0);
Graph g = malloc(sizeof(GraphRep));
assert(g!=NULL);
g->nV = n;
g->nE = 0;
int g->edges = malloc(n*sizeof(int*));
assert(g->edges!=NULL);
int i;
for(i=0;i<n;i++){
int g->edges[i]=calloc(n,sizeof(int));
assert(g->edges[i]!=NULL);
}
return g;
}

int numofvertex(Graph g){
assert(g!=NULL);
return(g->nV);
}

bool validEdge(Graph g, Edge e){
assert(g!=NULL);
if(0<e.v<=g->nV&&0<e.w<=g->nV)
return true;
return false;
}

void insertEdge(Graph g, Edge e){
assert(g!=NULL);
if(!check(g,e)){
g->edges[e.v][e.w]==1;
g->edges[e.w][e.v]==1;
g->nE++;
}
}

bool checkEdge(Graph g ,Edge e){
assert(g!=NULL);
int i;
int n;
for(i=0;i<g->nV;i++){
for(n=0;n<g->nV;n++){
 if(g->edges[i][n]==g->edges[e.v][e.w])
return true;
}
}
return false;
}

void deleteEdge(Graph g, Edge e){
assert(g!=NULL);
if(check(g,e)){
g->edges[e.v][e.w]=0;
g->edges[e.w][e.v]=0;
g->nE--;
}
}

bool adjacent(Graph g, Vertex v, Vertex w){
int i;
if(g->edges[v][w]==1||g->edges[w][v]==1){
return true;
}
return false;
}

void freeGraph(Graph g){
int i;
for(i=0;i<g->nV;i++){
free(g->edges[i]);
}
free(g->edges);
free(g);
}

void printGraph(Graph g){
int i,n;
for(i=0;i<g->nV;i++){
for(n=0;n<g->nV;n++){
printf("%d",g->edges[i][n]);
}
printf("\n")
}
}

void printGraph2(Graph g){
int i,n;
for(i=0;i<g->nV;i++){
for(n=0;n<g->nV;n++){
if(g->edges[i][n]==1){
printf("%d-%d",i,n);
}
}
}
}




