#define MAX 10000;


Graph newgraph(Gragh g, Vertex original){
int nV = numofvertex(g);
int *weigth = malloc(nV*sizeof(int));
int *visited = malloc(nV*sizeof(bool));
int *parent=malloc(nV*sizeof(int));
assert(weight!=NULL&&visited!=NULL&&parent!=NULL);
int i;
for(i=0;i<nV;i++){
visited[i]=false;
parent[i]=-1;
weight[i]=0;
}
weight[original]=0;
int n;
for(n=0;n<nV;n++){
int u=-1;
int min = MAX;
int v;
for(v=0;v<nV;v++){
if(visited[v]==false&&weight[v]<min){
u=v;
min=weight[v];
}
}
if(u==-1)
break
visited[u]=true;
}
int w;
for(v=0;v<nV;v++){
w=adjacent_weight(g,u,v);
if(w>0 && visited[w]==false && w<weight[v]){
parent[v]=u;
weight[v]=w;
}

}

}

Graph mst = newgraph(nV);
for(v=0;v<nV;v++){
if(!parent[i]==-1){
Edge e;
e.v = parent[i];
e.w = i;
e.weight=weight[i];
insertedge(mst,e);
}
}
free(weight);
free(parent);
free(visited);
return mst;

  }


\*
#define MAX 100000
Graph prim (Vertex original, Graph g){
assert(g!=NULL);
int nV = numofvertex(g);
int* weight=calloc(nV,sizeof(int));
int* parent = calloc(nV,sizeof(int));
bool *visited =  calloc(nV,sizeof(bool));
assert(weitgh!=NULL&&parent!=NULL&&visited!=NULL);
int i,n;
for(i=0;i<nV;i++){
weight[i]=MAX;
parent[i]=-1;
visited[i]=false;
}
weight[original]=0;
for(i=0;i<nV;i++){
int u =-1;
int min = MAX;
for(n=0;n<nV;n++){
if(visited[n]==false&&weight[n]<min){
min = weight[n];
u = n;
}
}
if(u==-1)
break;
visited[n]=true;
int w;
for(n=0;n<nV;n++){
w=adjacent(g,u,n)
if(w>0&&visited[n]==false&&w<weight[n]){
parent[n]=u;
weight[n]=w;
}
}

Graph mst = newgraph(nV);
for(n=0;n<nV;n++){
if(parent[n]!=-1){
Edge e;
e.v=parent[n];
e.w = n;
e.weight = weight[n];
insertedge(mst,e);
}
}

free(parent);
free(visited);
free(weight);
return mst;


}




}










*\




























































