#define max 1000000
Graph prim (Graph g, vertex original){
  assett(g!=NULL);
  int nV = numofvertex(g);
  int* parent = calloc(nV,sizeof(int));
  int* dist = calloc(nV,sizeof(int));
  bool* visited = calloc(nV,sizeof(bool));
  int i,n;
  for(i=0;i<nV;i++){
    parent[i]=-1;
    visited[i]=false;
    dist[i]=max;
  }
  dist[original]=0;
  for(i=0;i<nV;i++){
    int u =-1;
    int min = max;
    for(n=0;n<nV;n++){
      if(visited[n]==false&&dist[n]<min){
        min = dist[n];
        u=n;
      }
    }
    if(u==-1)
      break;
    visited[u]=true;
    for(n=0;n<nV;n++){
      int w;
      w= adjacent_dist(g,u,n);
      if(w=>0&&visited[n]==false&&w<dist[n]){
        dist[n]=w;
        parent[n]=u;
      }
    }
  }

  Graph mst = newgraph(nV);
  for(i=0;i<nV;i++){
    if(parent[i]!=-1){
      Edge e;
      e.v = i;
      e.w = parent[i];
      e.weight=dist[i];
      insertEdge(mst,e);
    }
  }
  return mst;
}

bool visited[max];
int parent[max];
  int dist[max];

void dijkstra(Graph g, vertex original,bool visited[], int parent[], int dist[]){
  int i,n;
  for(i=0;i<nV;i++){
    visited[i]=false;
    parent[i]=-1;
    dist[i]=max;
  }
  dist[original]=0;
  for(i=0;i<nV;i++){
    int u =-1;
    int min =max;
    for(n=0;n<nV;n++){
      if(visted[n]==false&&dist[n]<min){
        u = n;
        min=dist[n];
      }
    }
    if(u==-1)
      break
      visited[u]=true;
    for(n=0;n<nV;n++){
      int w;
      w = adjacent_weight(g,u,n);
      if(w>=0&&visited[n]==false&&w+dist[u]<dist[n]){
        dist[n]=w+dist[u];
        parent[n]=u;
      }
    }
  }
}



//priority queue

// priorityqueue.c
#define max 1000000

  int nV=numofvertex(g);

typedef struct PQueueRep{
  vertex item[max] ;
  int length;
}PQueueRep;



typedef struct PQueueRep *PQueue;

  POqueue newpqueue(){
  PQueue q = calloc(1,sizeof(PQueueRep));
  q->item =  calloc(1,sizeof(int));
  q->length =0;
  return q;
  }

void insert(PQueue q, int n){
  assert(q !=NULL);
  while(i<q->length && q->item[i]!=n)
    i++;
  if(i==q->length){
  q->item[q->length]=n;
    q->length++:
  }
}

int delete(PQueue q,int n, int nV){
  assert(q!=NULL&&q->length>0);
  int min_vertex;
  int i;
  int u=-1;
  int min = max;
  for(i=0;i<g->length;i++){
    if(q->item[i]<min){
      min = q->item[i];
      u= i ;
    }
  }
  min_vertex = q->item[u]；
  q->length--;
  if(u<q->length){
    q->item[u]=q->item[q->length]；
  }
  return min_vertex;
}





















































